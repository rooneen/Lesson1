package ru.geekbrains.Lesson11;

public class App02 {

    // поэтому в 1.5 появились дженерики
    // наибольшее распросторанение они получили в коллекциях - все коллекции в Java
    // параметризованы. Для параметризации необходимо записать в угловых скобках
    // символ, который является псевдонимом типа
    //

    public static void main(String[] args) {
        // примеры - ArrayList
        // это может быть любой набор символов
        //
        // может быть не один, а несколько
        // пример - HashMap - параметризовано двумя типами - для ключа и для значения
        //
        // Дженерики нужны для того, чтобы выявить большинство ошибок приведения
        // типов еще на стадии компиляции и избежать ненужного кода, приведения и проверки
        // типов
        //
        // Попробуем создать свой класс с дженериком.
        // Вспомним, что у нас есть абстрактный класс Animal и создадим класс, который может служить
        // контейнером для животных - пусть это будет зоопарк
        //
        // При создании класса можно создать его экземпляр и указать нужный тип
        final Zoo<Animal> animalZoo = new Zoo<>();
        // можно создать класс для любого животного (и не только животного)
        final Zoo<Snake> serpertarium = new Zoo<>();

        final Zoo<Integer> integerZoo = new Zoo<>(); // это выглядит странно, но пока работает

        // Создадим еще несколько классов - наследников для Animal
        // -- лев
        // -- слон
        // Всех их можно поместить в наш зоопарк, т.е. в данном случае полиморфизм работает
        animalZoo.encage(new Elephant("Джимбо", 50));
        animalZoo.encage(new Leon("Симба", 1));
        animalZoo.encage(new Snake("Каа", 1));

        // Если мы попробуем припарковать в серпентариум слона, то это у нас не получится
//        serpertarium.encage(new Elephant("Джимбо", 50)) // ошибка компиляции

        // Количество типов, которым может быть параметризован класс, неограниченно
    }
}
